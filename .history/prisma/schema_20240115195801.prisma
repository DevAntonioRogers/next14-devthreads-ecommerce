generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(cuid()) @map("_id")
  name           String?
  email          String?   @unique
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  orders         Order[]
  accounts       Account[]
  Session        Session[]
}

model Order {
  id              String      @id @default(cuid()) @map("_id")
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  amount          Float
  currency        String
  status          String
  createdDate     DateTime    @default(now())
  paymentIntentID String?     @unique
  items           OrderItem[]
}

model OrderItem {
  id       String  @id @default(cuid()) @map("_id")
  orderId  String
  order    Order   @relation(fields: [orderId], references: [id])
  name     String
  quantity Int
  price    Float
  image    String?
  size     String

  @@unique([orderId, name])
}
